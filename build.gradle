// 1. 플러그인 설치
buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"  // 플러그인의 저장소
		}
	}
	dependencies {
		classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"   // 플러그인 디펜던시
	}
}
plugins {
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}
//querydsl 추가
apply plugin: "com.ewerk.gradle.plugins.querydsl"   // 외부 플러그인 적용


group = 'jpabook'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://code.lds.org/nexus/content/groups/main-repo"}


}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
	compile 'mysql:mysql-connector-java'
	//implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	//implementation 'com.oracle.database.jdbc:ojdbc8:19.6.0.0'
	//implementation 'com.oracle.database.jdbc:ucp:19.6.0.0'

	implementation 'junit:junit:4.12'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//compile("com.oracle:ojdbc6:11.2.0.4")

	//querydsl 추가
	implementation 'com.querydsl:querydsl-jpa'
	//querydsl 추가
	implementation 'com.querydsl:querydsl-apt'

	developmentOnly("org.springframework.boot:spring-boot-devtools")
}

//S:querydsl 추가
//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝
test {
	useJUnitPlatform()
}



